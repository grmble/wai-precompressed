{
  "New Module": {
    "scope": "haskell",
    "prefix": "module",
    "isFileTemplate": true,
    "body": [
      "{-|",
      "Description : ${1:Short description}",
      "Copyright   : Juergen Gmeiner",
      "License     : MIT",
      "Maintainer  : spamless.juergen@gmail.com",
      "Stability   : experimental",
      "Portability : POSIX",
      "",
      "${2:Longer description containing @some markup@}",
      "-}",
      "",
      "{-# LANGUAGE OverloadedStrings #-}",
      "{-# LANGUAGE OverloadedLists #-}",
      "",
      "module ${3:Your.Module} where",
      "",
      "import Data.Text (Text)",
      "import Data.Text qualified as T",
      "import Data.Text.Encoding qualified as T",
      "import Data.ByteString.Builder",
      "import Data.ByteString.Lazy qualified as LB",
      "",
      "$0"
    ]
  },
  "New Spec Module": {
    "scope": "haskell",
    "prefix": "modspec",
    "isFileTemplate": true,
    "body": [
      "{-# LANGUAGE OverloadedStrings #-}",
      "{-# LANGUAGE OverloadedLists #-}",
      "",
      "module ${1:Your.ModuleSpec} where",
      "",
      "import Data.Text (Text)",
      "import Data.Text qualified as T",
      "import Data.Text.Encoding qualified as T",
      "import Data.ByteString.Builder",
      "import Data.ByteString.Lazy qualified as LB",
      "import Test.Hspec",
      "import Test.QuickCheck",
      "",
      "$0",
      "spec :: Spec",
      "spec = do",
      "  describe \"Int\" $ do",
      "    it \"roundtrips via show/read\" $ do",
      "      \\x -> (read . show) x `shouldBe` (x :: Int)",
      "",
      "main :: IO ()",
      "main = hspec spec"
    ]
  }
}